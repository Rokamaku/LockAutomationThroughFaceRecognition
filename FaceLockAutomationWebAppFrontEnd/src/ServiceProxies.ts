/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.12.0 (NJsonSchema v9.13.15.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as moment from 'moment';

export class FaceLogClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44366";
    }

    getFaceLogInPersonGroup(personGroupId: number, pageSize: number | undefined, pageNumber: number | undefined, sortType: string | null | undefined, fromDate: moment.Moment | null | undefined, toDate: moment.Moment | null | undefined): Promise<FaceLogSearchResultDTO | null> {
        let url_ = this.baseUrl + "/api/FaceLog/{personGroupId}?";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&"; 
        if (sortType !== undefined)
            url_ += "SortType=" + encodeURIComponent("" + sortType) + "&"; 
        if (fromDate !== undefined)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&"; 
        if (toDate !== undefined)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFaceLogInPersonGroup(_response);
        });
    }

    protected processGetFaceLogInPersonGroup(response: Response): Promise<FaceLogSearchResultDTO | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FaceLogSearchResultDTO.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FaceLogSearchResultDTO | null>(<any>null);
    }

    createFaceLog(personGroupId: number, image: FileParameter | null | undefined): Promise<FaceLogEntity | null> {
        let url_ = this.baseUrl + "/api/FaceLog/{personGroupId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (image !== null && image !== undefined)
            content_.append("image", image.data, image.fileName ? image.fileName : "image");

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateFaceLog(_response);
        });
    }

    protected processCreateFaceLog(response: Response): Promise<FaceLogEntity | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FaceLogEntity.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FaceLogEntity | null>(<any>null);
    }

    deleteFaceLogs(personGroupId: number, faceLogIds: number[]): Promise<number> {
        let url_ = this.baseUrl + "/api/FaceLog/{personGroupId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(faceLogIds);

        let options_ = <RequestInit>{
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteFaceLogs(_response);
        });
    }

    protected processDeleteFaceLogs(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    getPersonFaceLog(personGroupId: number, personId: number, pageSize: number | undefined, pageNumber: number | undefined, sortType: string | null | undefined, fromDate: moment.Moment | null | undefined, toDate: moment.Moment | null | undefined): Promise<FaceLogSearchResultDTO | null> {
        let url_ = this.baseUrl + "/api/FaceLog/PersonFaceLog/{personGroupId}/{personId}?";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId)); 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&"; 
        if (sortType !== undefined)
            url_ += "SortType=" + encodeURIComponent("" + sortType) + "&"; 
        if (fromDate !== undefined)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&"; 
        if (toDate !== undefined)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPersonFaceLog(_response);
        });
    }

    protected processGetPersonFaceLog(response: Response): Promise<FaceLogSearchResultDTO | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FaceLogSearchResultDTO.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FaceLogSearchResultDTO | null>(<any>null);
    }

    getUnknownFaceLogInGroup(personGroupId: number, pageSize: number | undefined, pageNumber: number | undefined, sortType: string | null | undefined, fromDate: moment.Moment | null | undefined, toDate: moment.Moment | null | undefined): Promise<FaceLogSearchResultDTO | null> {
        let url_ = this.baseUrl + "/api/FaceLog/UnknownFaceLog/{personGroupId}?";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&"; 
        if (sortType !== undefined)
            url_ += "SortType=" + encodeURIComponent("" + sortType) + "&"; 
        if (fromDate !== undefined)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&"; 
        if (toDate !== undefined)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUnknownFaceLogInGroup(_response);
        });
    }

    protected processGetUnknownFaceLogInGroup(response: Response): Promise<FaceLogSearchResultDTO | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FaceLogSearchResultDTO.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FaceLogSearchResultDTO | null>(<any>null);
    }

    getKnownFaceLogInGroup(personGroupId: number, pageSize: number | undefined, pageNumber: number | undefined, sortType: string | null | undefined, fromDate: moment.Moment | null | undefined, toDate: moment.Moment | null | undefined): Promise<FaceLogSearchResultDTO | null> {
        let url_ = this.baseUrl + "/api/FaceLog/KnownFaceLog/{personGroupId}?";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&"; 
        if (sortType !== undefined)
            url_ += "SortType=" + encodeURIComponent("" + sortType) + "&"; 
        if (fromDate !== undefined)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&"; 
        if (toDate !== undefined)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetKnownFaceLogInGroup(_response);
        });
    }

    protected processGetKnownFaceLogInGroup(response: Response): Promise<FaceLogSearchResultDTO | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FaceLogSearchResultDTO.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FaceLogSearchResultDTO | null>(<any>null);
    }

    getUndetectedFaceLogInGroup(personGroupId: number, pageSize: number | undefined, pageNumber: number | undefined, sortType: string | null | undefined, fromDate: moment.Moment | null | undefined, toDate: moment.Moment | null | undefined): Promise<FaceLogSearchResultDTO | null> {
        let url_ = this.baseUrl + "/api/FaceLog/UndetectedFaceLog/{personGroupId}?";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&"; 
        if (sortType !== undefined)
            url_ += "SortType=" + encodeURIComponent("" + sortType) + "&"; 
        if (fromDate !== undefined)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&"; 
        if (toDate !== undefined)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUndetectedFaceLogInGroup(_response);
        });
    }

    protected processGetUndetectedFaceLogInGroup(response: Response): Promise<FaceLogSearchResultDTO | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FaceLogSearchResultDTO.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FaceLogSearchResultDTO | null>(<any>null);
    }
}

export class PersonClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44366";
    }

    getAll(personGroupId: number): Promise<PersonEntity[] | null> {
        let url_ = this.baseUrl + "/api/Person/{personGroupId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<PersonEntity[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PersonEntity.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PersonEntity[] | null>(<any>null);
    }

    delete(personGroupId: number, rmPerson: number[]): Promise<number[] | null> {
        let url_ = this.baseUrl + "/api/Person/{personGroupId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(rmPerson);

        let options_ = <RequestInit>{
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<number[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number[] | null>(<any>null);
    }

    get(personGroupId: number, personId: number): Promise<PersonEntity | null> {
        let url_ = this.baseUrl + "/api/Person/{personGroupId}/{personId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<PersonEntity | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonEntity.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PersonEntity | null>(<any>null);
    }

    post(person: PersonDTO): Promise<PersonEntity | null> {
        let url_ = this.baseUrl + "/api/Person";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(person);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<PersonEntity | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonEntity.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PersonEntity | null>(<any>null);
    }

    put(personName: PersonDTO): Promise<PersonDTO | null> {
        let url_ = this.baseUrl + "/api/Person";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(personName);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: Response): Promise<PersonDTO | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonDTO.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PersonDTO | null>(<any>null);
    }
}

export class PersonGroupClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44366";
    }

    getAll(): Promise<PersonGroupEntity[] | null> {
        let url_ = this.baseUrl + "/api/PersonGroup";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<PersonGroupEntity[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PersonGroupEntity.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PersonGroupEntity[] | null>(<any>null);
    }

    get(personGroupId: number): Promise<PersonGroupEntity | null> {
        let url_ = this.baseUrl + "/api/PersonGroup/{personGroupId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<PersonGroupEntity | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonGroupEntity.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PersonGroupEntity | null>(<any>null);
    }

    delete(personGroupId: number): Promise<number> {
        let url_ = this.baseUrl + "/api/PersonGroup/{personGroupId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    post(personGroupName: string | null): Promise<PersonGroupEntity | null> {
        let url_ = this.baseUrl + "/api/PersonGroup/{personGroupName}";
        if (personGroupName === undefined || personGroupName === null)
            throw new Error("The parameter 'personGroupName' must be defined.");
        url_ = url_.replace("{personGroupName}", encodeURIComponent("" + personGroupName)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<PersonGroupEntity | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PersonGroupEntity.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PersonGroupEntity | null>(<any>null);
    }

    changeDefaultGroup(personGroupId: number): Promise<number> {
        let url_ = this.baseUrl + "/api/PersonGroup/ChangeDefaultGroup/{personGroupId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangeDefaultGroup(_response);
        });
    }

    protected processChangeDefaultGroup(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }
}

export class TrainingClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44366";
    }

    get(personGroupId: number): Promise<TrainingStatus2 | null> {
        let url_ = this.baseUrl + "/api/Training/{personGroupId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<TrainingStatus2 | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? TrainingStatus2.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TrainingStatus2 | null>(<any>null);
    }

    post(personGroupId: number): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Training/{personGroupId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

export class FaceClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44366";
    }

    getAll(personGroupId: number, personId: number): Promise<FaceEntity[] | null> {
        let url_ = this.baseUrl + "/api/Face/{personGroupId}/{personId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<FaceEntity[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FaceEntity.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FaceEntity[] | null>(<any>null);
    }

    post(personGroupId: number, personId: number, files: any[] | null | undefined): Promise<FaceEntity[] | null> {
        let url_ = this.baseUrl + "/api/Face/{personGroupId}/{personId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (files !== null && files !== undefined)
            files.forEach(fl => content_.append("files", fl))

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: Response): Promise<FaceEntity[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FaceEntity.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FaceEntity[] | null>(<any>null);
    }

    delete(personGroupId: number, personId: number, faceIds: number[]): Promise<number[] | null> {
        let url_ = this.baseUrl + "/api/Face/{personGroupId}/{personId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(faceIds);

        let options_ = <RequestInit>{
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<number[] | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number[] | null>(<any>null);
    }

    get(personGroupId: number, personId: number, faceId: number): Promise<FaceEntity | null> {
        let url_ = this.baseUrl + "/api/Face/{personGroupId}/{personId}/{faceId}";
        if (personGroupId === undefined || personGroupId === null)
            throw new Error("The parameter 'personGroupId' must be defined.");
        url_ = url_.replace("{personGroupId}", encodeURIComponent("" + personGroupId)); 
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId)); 
        if (faceId === undefined || faceId === null)
            throw new Error("The parameter 'faceId' must be defined.");
        url_ = url_.replace("{faceId}", encodeURIComponent("" + faceId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<FaceEntity | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? FaceEntity.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FaceEntity | null>(<any>null);
    }
}

export class SearchResultDTOOfFaceLogEntityAndPaginationHeader implements ISearchResultDTOOfFaceLogEntityAndPaginationHeader {
    paginationHeader?: PaginationHeader | undefined;
    data?: FaceLogEntity[] | undefined;

    constructor(data?: ISearchResultDTOOfFaceLogEntityAndPaginationHeader) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.paginationHeader = data["paginationHeader"] ? PaginationHeader.fromJS(data["paginationHeader"]) : <any>undefined;
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [] as any;
                for (let item of data["data"])
                    this.data!.push(FaceLogEntity.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SearchResultDTOOfFaceLogEntityAndPaginationHeader {
        data = typeof data === 'object' ? data : {};
        let result = new SearchResultDTOOfFaceLogEntityAndPaginationHeader();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paginationHeader"] = this.paginationHeader ? this.paginationHeader.toJSON() : <any>undefined;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISearchResultDTOOfFaceLogEntityAndPaginationHeader {
    paginationHeader?: PaginationHeader | undefined;
    data?: FaceLogEntity[] | undefined;
}

export class FaceLogSearchResultDTO extends SearchResultDTOOfFaceLogEntityAndPaginationHeader implements IFaceLogSearchResultDTO {

    constructor(data?: IFaceLogSearchResultDTO) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): FaceLogSearchResultDTO {
        data = typeof data === 'object' ? data : {};
        let result = new FaceLogSearchResultDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IFaceLogSearchResultDTO extends ISearchResultDTOOfFaceLogEntityAndPaginationHeader {
}

export class PaginationHeader implements IPaginationHeader {
    pageNumber!: number;
    pageSize!: number;
    totalCount?: number | undefined;
    totalPages?: number | undefined;

    constructor(data?: IPaginationHeader) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.pageNumber = data["pageNumber"];
            this.pageSize = data["pageSize"];
            this.totalCount = data["totalCount"];
            this.totalPages = data["totalPages"];
        }
    }

    static fromJS(data: any): PaginationHeader {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationHeader();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        data["totalPages"] = this.totalPages;
        return data; 
    }
}

export interface IPaginationHeader {
    pageNumber: number;
    pageSize: number;
    totalCount?: number | undefined;
    totalPages?: number | undefined;
}

export abstract class BaseEntity implements IBaseEntity {
    id!: number;

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IBaseEntity {
    id: number;
}

export abstract class GenericEntity extends BaseEntity implements IGenericEntity {
    objectId!: string;
    createdDate!: moment.Moment;

    constructor(data?: IGenericEntity) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.objectId = data["objectId"];
            this.createdDate = data["createdDate"] ? moment(data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GenericEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'GenericEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["objectId"] = this.objectId;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IGenericEntity extends IBaseEntity {
    objectId: string;
    createdDate: moment.Moment;
}

export class FaceLogEntity extends GenericEntity implements IFaceLogEntity {
    persons?: string[] | undefined;
    personGroup?: PersonGroupEntity | undefined;
    personGroupId!: number;
    file?: AzureFile | undefined;
    faceRectangles?: FaceRectangle[] | undefined;

    constructor(data?: IFaceLogEntity) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["persons"] && data["persons"].constructor === Array) {
                this.persons = [] as any;
                for (let item of data["persons"])
                    this.persons!.push(item);
            }
            this.personGroup = data["personGroup"] ? PersonGroupEntity.fromJS(data["personGroup"]) : <any>undefined;
            this.personGroupId = data["personGroupId"];
            this.file = data["file"] ? AzureFile.fromJS(data["file"]) : <any>undefined;
            if (data["faceRectangles"] && data["faceRectangles"].constructor === Array) {
                this.faceRectangles = [] as any;
                for (let item of data["faceRectangles"])
                    this.faceRectangles!.push(FaceRectangle.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FaceLogEntity {
        data = typeof data === 'object' ? data : {};
        let result = new FaceLogEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.persons && this.persons.constructor === Array) {
            data["persons"] = [];
            for (let item of this.persons)
                data["persons"].push(item);
        }
        data["personGroup"] = this.personGroup ? this.personGroup.toJSON() : <any>undefined;
        data["personGroupId"] = this.personGroupId;
        data["file"] = this.file ? this.file.toJSON() : <any>undefined;
        if (this.faceRectangles && this.faceRectangles.constructor === Array) {
            data["faceRectangles"] = [];
            for (let item of this.faceRectangles)
                data["faceRectangles"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IFaceLogEntity extends IGenericEntity {
    persons?: string[] | undefined;
    personGroup?: PersonGroupEntity | undefined;
    personGroupId: number;
    file?: AzureFile | undefined;
    faceRectangles?: FaceRectangle[] | undefined;
}

export class PersonGroupEntity extends GenericEntity implements IPersonGroupEntity {
    persons?: PersonEntity[] | undefined;
    name?: string | undefined;
    trainingStatus!: TrainingStatus;
    isDefault!: boolean;

    constructor(data?: IPersonGroupEntity) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["persons"] && data["persons"].constructor === Array) {
                this.persons = [] as any;
                for (let item of data["persons"])
                    this.persons!.push(PersonEntity.fromJS(item));
            }
            this.name = data["name"];
            this.trainingStatus = data["trainingStatus"];
            this.isDefault = data["isDefault"];
        }
    }

    static fromJS(data: any): PersonGroupEntity {
        data = typeof data === 'object' ? data : {};
        let result = new PersonGroupEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.persons && this.persons.constructor === Array) {
            data["persons"] = [];
            for (let item of this.persons)
                data["persons"].push(item.toJSON());
        }
        data["name"] = this.name;
        data["trainingStatus"] = this.trainingStatus;
        data["isDefault"] = this.isDefault;
        super.toJSON(data);
        return data; 
    }
}

export interface IPersonGroupEntity extends IGenericEntity {
    persons?: PersonEntity[] | undefined;
    name?: string | undefined;
    trainingStatus: TrainingStatus;
    isDefault: boolean;
}

export class PersonEntity extends GenericEntity implements IPersonEntity {
    personGroup?: PersonGroupEntity | undefined;
    personGroupId!: number;
    faces?: FaceEntity[] | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    internalName?: string | undefined;

    constructor(data?: IPersonEntity) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.personGroup = data["personGroup"] ? PersonGroupEntity.fromJS(data["personGroup"]) : <any>undefined;
            this.personGroupId = data["personGroupId"];
            if (data["faces"] && data["faces"].constructor === Array) {
                this.faces = [] as any;
                for (let item of data["faces"])
                    this.faces!.push(FaceEntity.fromJS(item));
            }
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.internalName = data["internalName"];
        }
    }

    static fromJS(data: any): PersonEntity {
        data = typeof data === 'object' ? data : {};
        let result = new PersonEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personGroup"] = this.personGroup ? this.personGroup.toJSON() : <any>undefined;
        data["personGroupId"] = this.personGroupId;
        if (this.faces && this.faces.constructor === Array) {
            data["faces"] = [];
            for (let item of this.faces)
                data["faces"].push(item.toJSON());
        }
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["internalName"] = this.internalName;
        super.toJSON(data);
        return data; 
    }
}

export interface IPersonEntity extends IGenericEntity {
    personGroup?: PersonGroupEntity | undefined;
    personGroupId: number;
    faces?: FaceEntity[] | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    internalName?: string | undefined;
}

export class FaceEntity extends GenericEntity implements IFaceEntity {
    person?: PersonEntity | undefined;
    personId!: number;
    file?: AzureFile | undefined;

    constructor(data?: IFaceEntity) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.person = data["person"] ? PersonEntity.fromJS(data["person"]) : <any>undefined;
            this.personId = data["personId"];
            this.file = data["file"] ? AzureFile.fromJS(data["file"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FaceEntity {
        data = typeof data === 'object' ? data : {};
        let result = new FaceEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["person"] = this.person ? this.person.toJSON() : <any>undefined;
        data["personId"] = this.personId;
        data["file"] = this.file ? this.file.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IFaceEntity extends IGenericEntity {
    person?: PersonEntity | undefined;
    personId: number;
    file?: AzureFile | undefined;
}

export class AzureFile implements IAzureFile {
    fileName?: string | undefined;
    filePath?: string | undefined;
    uri?: string | undefined;

    constructor(data?: IAzureFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.filePath = data["filePath"];
            this.uri = data["uri"];
        }
    }

    static fromJS(data: any): AzureFile {
        data = typeof data === 'object' ? data : {};
        let result = new AzureFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["filePath"] = this.filePath;
        data["uri"] = this.uri;
        return data; 
    }
}

export interface IAzureFile {
    fileName?: string | undefined;
    filePath?: string | undefined;
    uri?: string | undefined;
}

export enum TrainingStatus {
    Succeeded = 0, 
    Failed = 1, 
    Running = 2, 
    NotTrain = 3, 
}

export class FaceRectangle implements IFaceRectangle {
    height!: number;
    width!: number;
    top!: number;
    left!: number;

    constructor(data?: IFaceRectangle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.height = data["height"];
            this.width = data["width"];
            this.top = data["top"];
            this.left = data["left"];
        }
    }

    static fromJS(data: any): FaceRectangle {
        data = typeof data === 'object' ? data : {};
        let result = new FaceRectangle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["height"] = this.height;
        data["width"] = this.width;
        data["top"] = this.top;
        data["left"] = this.left;
        return data; 
    }
}

export interface IFaceRectangle {
    height: number;
    width: number;
    top: number;
    left: number;
}

export class PersonDTO implements IPersonDTO {
    id?: number | undefined;
    personGroupId!: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    internalName?: string | undefined;
    externalName?: string | undefined;

    constructor(data?: IPersonDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.personGroupId = data["personGroupId"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.internalName = data["internalName"];
            this.externalName = data["externalName"];
        }
    }

    static fromJS(data: any): PersonDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PersonDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["personGroupId"] = this.personGroupId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["internalName"] = this.internalName;
        data["externalName"] = this.externalName;
        return data; 
    }
}

export interface IPersonDTO {
    id?: number | undefined;
    personGroupId: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    internalName?: string | undefined;
    externalName?: string | undefined;
}

export class TrainingStatus2 implements ITrainingStatus2 {
    status!: Status;
    createdDateTime!: moment.Moment;
    lastActionDateTime!: moment.Moment;
    message?: string | undefined;

    constructor(data?: ITrainingStatus2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.status = data["status"];
            this.createdDateTime = data["createdDateTime"] ? moment(data["createdDateTime"].toString()) : <any>undefined;
            this.lastActionDateTime = data["lastActionDateTime"] ? moment(data["lastActionDateTime"].toString()) : <any>undefined;
            this.message = data["message"];
        }
    }

    static fromJS(data: any): TrainingStatus2 {
        data = typeof data === 'object' ? data : {};
        let result = new TrainingStatus2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["lastActionDateTime"] = this.lastActionDateTime ? this.lastActionDateTime.toISOString() : <any>undefined;
        data["message"] = this.message;
        return data; 
    }
}

export interface ITrainingStatus2 {
    status: Status;
    createdDateTime: moment.Moment;
    lastActionDateTime: moment.Moment;
    message?: string | undefined;
}

export enum Status {
    Succeeded = 0, 
    Failed = 1, 
    Running = 2, 
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}